#!/usr/bin/env python
import requests, subprocess, shutil, curses, sys, configparser, platform, json, argparse
from typing import Any, List, Dict
from enum import Enum
from dataclasses import dataclass
from pathlib import Path

@dataclass
class Geometry:
    """
    The Geometry class holds all terminal measurements.
    """
    total_height: int
    total_width: int
    two_pane_width: int
    top_row_height: int = 1
    spacer_height: int = 1
    task_row_height: int = 0

    def __init__(self, stdscr) -> None:
        """
        Initializes the Geometry object based on the stdscr input.

        :param stdscr: curses stdscr object.
        :type stdscr: curses._CursesWindow
        :returns: None
        """
        self.total_height, self.total_width = stdscr.getmaxyx()
        self.two_pane_width = self.total_width // 2
        self.task_row_height = self.total_height - (
            self.top_row_height + self.spacer_height
        )

    def col_width(self, num_columns: int = 0, area: int = 0) -> int:
        """Defaults to single column width if num_columns is 0
        if area is 0 uses total screen width.

        :param num_columns: Desired number of columns
        :type num_columns: int
        :param area: Total area to compute against
        :type area: int
        :returns: int"""
        if area == 0:
            return self.total_width // num_columns
        else:
            return area // num_columns

    def bottom_row_height(self) -> int:
        """
        This method is not effective as it will not calculate the area of the articles list
        """
        return self.total_height - self.top_row_height - self.spacer_height

@dataclass
class SystemInfo:
    mem: List
    cpu: Dict
    system: str = platform.system()

    def __init__(self):
        self.mem = []
        self.cpu = self.cpu_state()

    def mem_state(self) -> List:
        return []

    def cpu_state(self) -> Dict[str, str]:
        if self.system == "Linux":
            key_pairs: List = []
            with open('/proc/cpuinfo') as f:
                for i, v in enumerate(f.readlines(), start=0):
                    value = v.strip().replace("\t", "").format()
                    key_pair = value.replace(" ", "").split(":")
                    key_pairs.append(key_pair)
            cpu_info_dict = {item[0]: item[1] for item in key_pairs if len(item) == 2}
            return cpu_info_dict
        elif self.system == "Windows":
            result = subprocess.run(["wmic", "cpu", "get", "name"], stdout=subprocess.PIPE, text=True)
            return {"Processor": result.stdout.strip().splitlines()[1]}
        elif self.system == "Darwin":
            result = subprocess.run(["sysctl", "-n", "machdep.cpu.brand_string"], stdout=subprocess.PIPE, text=True)
            return {"Processor": result.stdout.strip().splitlines()[1]}
        else:
            processor = platform.processor()
            if processor:
                return {"Processor": processor}
            else:
                return {"Processor": "N/A"}

@dataclass
class Config:
    mem: List
    cpu: List
    parser: configparser.ConfigParser
    obj: Any
    path: Path

    def __init__(self):
        config_dir = Path.home()/".config"/"dashboard"
        config_file = config_dir/"config.ini"
        if not config_dir.exists():
            config_dir.mkdir(parents=True, exist_ok=True)
            self.make_initial_config(config_file)
        self.parser = configparser.ConfigParser()
        self.file = config_file 
        self.settings = self.load()

    def load(self):
        return self.parser.read(self.file) 

    def make_initial_config(self, path):
        parser = configparser.ConfigParser()
        parser['Settings'] = {'wx_loc': 'Paris'}
        with open(path, 'w') as file:
            parser.write(file)

class Dashboard:
    def __init__(self):
        self.config = Config()
        self.term_size = shutil.get_terminal_size()
        self.is_arch: bool = self.archlinux()
        # self.articles = self.get_news(50)
        self.current_article = 0
        self.refresh_rate = (60 * 10)
        self.wait_timer = 60
        self.browser = "lynx"
        self.article_list = []

    def weather(self):
        try:
            response = requests.get(f"https://wttr.in/{self.config["Settings"]["wx_loc"]}", params={'format': '4'})
            if response.status_code == 200:
                weather = response.text
            else:
                weather = f"Error: {response.status_code}"
        except Exception as e:
            return f"Error: {e}"
        return weather

    def updates(self):
        if self.is_arch:
            return self.count_arch_updates()

    def top_story_ids(self):
        return requests.get("https://hacker-news.firebaseio.com/v0/topstories.json?print=pretty").json()

    def articles(self, number = 0, current = 0) -> List[str]:
        if len(self.article_list) == 0:
            """Get a list of articles
            """
            top_stories_ids = self.top_story_ids()
            stories = []
            if number == 0:
                number = len(self.article_list)
            for i in range(number):
                story_id = top_stories_ids[i]
                story_url = f"https://hacker-news.firebaseio.com/v0/item/{story_id}.json?print=pretty"
                story_data = requests.get(story_url).json()
                url = story_data.get('url', 'No URL')
                # _avail_columns = self.term_size.columns - len(url) - 10
                _avail_columns = self.term_size.columns - len(url) - 5
                _ =  f"{story_data.get('url', 'No URL')}"
                stories.append(f"{story_id} > {story_data['title'][0:_avail_columns]}")
            self.article_list = stories
            return stories
        else: return self.article_list

    def archlinux(self) -> bool:
        return 'arch' in self.os_info()["id"]

    def os_info(self) -> Dict:
        res = {}
        try:
            with open('/etc/os-release', 'r') as f:
                os_info = f.read().lower()
            for line in os_info.strip().split('\n'):
                k,v = line.split("=", 1)
                v = v.strip('"')
                res[k] = v
            res["found"] = True
            return res
        except FileNotFoundError:
            res["found"] = False
        return res

    def count_arch_updates(self) -> float:
        if self.is_arch:
            result = subprocess.run(['pacman', '-Qu'], capture_output=True, text=True)
            if result.stdout == "":
                return 0
            updates = result.stdout.strip().split('\n')
            if updates[0]:
                return len(updates)
            else:
                return 0
        else:
            return 0

    def article_reader(self, story_id = None):
        if story_id is None:
            story_id = self.top_story_ids()[0]
        else: 
            self.current_article = story_id
            story_id = self.top_story_ids()[story_id]
        story_url = f"https://hacker-news.firebaseio.com/v0/item/{story_id}.json?print=pretty"
        story_data = requests.get(story_url).json()
        url = story_data.get('url', 'No URL')
        lynx_out = subprocess.run(["lynx", "-dump", url], stdout=subprocess.PIPE).stdout.decode('utf-8', errors='replace')

        return lynx_out.splitlines()

class WindowType(Enum):
    TOP_BAR = "topbar"
    ARTICLE_LIST = "alist"
    ARTICLE_READER = "aread"
    TASK = "task"

@dataclass
class State:
    active_window: WindowType
    cursor_position: List[int]

class UserInterface:
    def __init__(self, stdscr) -> None:
        self.stdscr = stdscr
        self.geometry = Geometry(stdscr)
        self.dash = Dashboard()
        self.article_count = 0
        self.task_start_row = None
        self.hline = curses.ACS_HLINE
        self.vline = curses.ACS_VLINE
        self.state = State(active_window = WindowType.TOP_BAR, cursor_position = [0,0])

    def center_pos(self, msg, width = None):
        if width is None:
            _avail_columns = self.geometry.total_width
        else:
            _avail_columns = width
        _msg_len = len(msg)
        return ((_avail_columns * .5) - (_msg_len * .5))

    def print_section_header(self, msg, width = None):
        _spacer = ""
        for _ in range(self.center_pos(msg, width).__int__()):
            _spacer = _spacer + " "
        return f"{_spacer}{msg}"

    def render(self, article = 0):
        if self.geometry.total_height >= 40 and self.geometry.total_width >= 120:
            remaining_rows = self.draw_top_bar()
            self.article_count = remaining_rows - 10
            self.task_start_row = (self.geometry.total_height - remaining_rows) + self.article_count
            self.dash.articles(self.article_count)
            self.draw_article_list(0)
            self.draw_task_list()
            if self.geometry.total_width >= 200:
                self.read_article(article)
            else:
                pass
                # - [ ] Breaking due to keybind and flow control in read_article. $id{c4c337ac-d3de-48fe-b3c8-56011429a6b9}
        else:
            self.stdscr.clear()
            self.stdscr.addstr(0, 0, self.print_section_header("Dashboard: Error"), curses.A_BOLD)
            self.stdscr.addstr(1, 0, self.print_section_header(f"Your terminal width of {self.geometry.total_width} is less than the required 120."))
            self.stdscr.addstr(2, 1, "Press 'q' to exit.", curses.A_BOLD)
            self.stdscr.refresh()
            while True:
                key = self.stdscr.getch()
                if key == ord('q'):
                    break
            self.stdscr.clear()
            exit()

    def draw_top_bar(self) -> int:
        """Draws Main Menu Bar aka top_bar
            :param: items [wx, updates, news_headline]
        """
        # wx, updates, sysinfo = items[0], f"Updates: {items[1]}", items[2]
        wx, updates, sysinfo = self.dash.weather(), f"Updates: {self.dash.updates()}", SystemInfo()
        cpu_modelname = sysinfo.cpu['modelname']
        cpu_cores = sysinfo.cpu['cpucores']
        cpu_MHz = int(float(sysinfo.cpu["cpuMHz"]))
        cpu_str = f"{cpu_cores} Core {cpu_modelname} @ {cpu_MHz} MHz"
        menu_btn_str = f"[F1] Menu"
        self.stdscr.addstr(0, 0, menu_btn_str, curses.color_pair(3))
        self.stdscr.addstr(0, (self.geometry.total_width - len(wx) + 1 - len(updates) - len(cpu_str) - 10), cpu_str, curses.color_pair(1))
        self.stdscr.addstr(0, (self.geometry.total_width - len(wx) + 1 - len(updates) - 5), updates)
        self.stdscr.addstr(0, (self.geometry.total_width - len(wx)), wx)
        # Print Separator
        self.stdscr.hline(self.geometry.top_row_height, 0, self.hline, self.geometry.total_width, curses.A_BOLD)
        self.stdscr.refresh()
        # Determine how many rows are left in the current terminal
        remaining_rows = (self.geometry.total_height - (self.geometry.top_row_height + self.geometry.spacer_height)) 
        return remaining_rows

    def draw_task_list(self):
        task = Task()
        if task.installed:
            self.stdscr.hline(self.task_start_row, 0, self.hline, self.geometry.two_pane_width)
            self.stdscr.addstr(self.task_start_row + 1, 0, self.print_section_header("Active Tasks", self.geometry.two_pane_width), curses.A_BOLD)
            pendingtasks = task.pending_tasks_list()
            for i, taskitem in enumerate(pendingtasks, start=2):
                self.stdscr.addstr(self.task_start_row + i, 0, taskitem, curses.A_BOLD)
            self.stdscr.refresh()

    def draw_article_list(self, active: int = 0):
        articles = self.dash.articles()
        for i in range((self.geometry.top_row_height + self.geometry.spacer_height), self.geometry.total_height):
            self.stdscr.move(i, self.geometry.two_pane_width)
            self.stdscr.clrtoeol()
        for i, article in enumerate(articles, start=0):
            article_snippet = article[:self.geometry.two_pane_width-5]
            if ((i + self.geometry.top_row_height + self.geometry.spacer_height) < self.geometry.total_height):
                if i != active:
                    self.stdscr.addstr(self.geometry.top_row_height + self.geometry.spacer_height + i, 0, article_snippet, curses.color_pair(2))
                else:
                    self.stdscr.addstr(self.geometry.top_row_height + self.geometry.spacer_height + i, 0, article_snippet, curses.color_pair(1))
        self.state.active_window = WindowType.ARTICLE_LIST
        self.state.cursor_position = self.stdscr.getyx()
        self.stdscr.refresh()

    def handle_menu(self):
        self.stdscr.clear()
        self.stdscr.addstr(1, 1, "Menu Opened! Press 'q' to exit this menu.", curses.A_BOLD)
        self.stdscr.refresh()
        while True:
            key = self.stdscr.getch()
            if key == ord('q'):
                break
        self.stdscr.clear()
        draw_ui(self.stdscr)

    def line_formater(self, line: str) -> str:
        if (len(line) > self.geometry.two_pane_width):
            line_split = ""
            while line:
                line_split += f"{line[0:self.geometry.two_pane_width]}\n"
                line = line[self.geometry.two_pane_width:]
            return line_split
        return line

    def read_article(self, number = 0):
        self.depth_counter = 0
        self.scroll_offset = 0
        self.article = self.dash.article_reader(number)
        while True:
            for i in range((self.geometry.top_row_height), self.geometry.total_height):
                self.stdscr.move(i, self.geometry.two_pane_width)
                self.stdscr.clrtoeol()

            for i, line in enumerate(self.article[self.scroll_offset:]):
                if i + self.geometry.top_row_height + self.geometry.spacer_height >= self.geometry.bottom_row_height():
                    break
                self.stdscr.addstr(self.geometry.top_row_height + self.geometry.spacer_height + i, self.geometry.two_pane_width, self.line_formater(line))

            self.stdscr.hline(self.geometry.top_row_height, 0, self.hline, self.geometry.total_width)
            self.stdscr.vline(self.geometry.top_row_height + self.geometry.spacer_height, self.geometry.two_pane_width -1, self.vline, self.geometry.bottom_row_height() - self.geometry.spacer_height)
            self.stdscr.refresh()
            self.state.active_window = WindowType.ARTICLE_READER
            self.state.cursor_position = self.stdscr.getyx()
            self.keybinds(number)

    def keybinds(self, number = 0):
        key = self.stdscr.getch()
        if key == curses.KEY_F1:
            self.handle_menu()
        if key == ord('q'):
            self.stdscr.clear()
            sys.exit()
        
        if self.state.active_window == WindowType.ARTICLE_READER or self.state.active_window == WindowType.ARTICLE_LIST:
            if self.state.active_window is WindowType.ARTICLE_READER:
                if key == curses.KEY_UP or key == ord('k') and self.scroll_offset > 0:
                    self.scroll_offset -= 1
                elif key == curses.KEY_DOWN or key == ord('j') and self.scroll_offset < len(self.article) - self.geometry.bottom_row_height() + self.geometry.spacer_height:
                    self.scroll_offset += 1  # Scroll down
                elif key == 14:
                    number = number + 1
                    self.depth_counter += 1
                    self.draw_article_list(number)
                    self.read_article(number)
                elif key == 16:
                    self.depth_counter -= 1
                    number = number - 1
                    self.draw_article_list(number)
                    self.read_article(number)
            if self.state.active_window is WindowType.ARTICLE_LIST:
                if key == curses.KEY_UP or key == ord('k') and self.scroll_offset > 0:
                    number = number + 1
                    self.depth_counter += 1
                    self.draw_article_list(number)
                    self.read_article(number)
                elif key == curses.KEY_DOWN or key == ord('j') and self.scroll_offset < len(self.article) - self.geometry.bottom_row_height() + self.geometry.spacer_height:
                    self.depth_counter -= 1
                    number = number - 1
                    self.draw_article_list(number)
                    self.read_article(number)


class Task:
    """
    Main Task Interface

    Attributes:
        installed (bool): is task installed?
        command (str): command to be run on the host
        tasks (list): all available task objects unfiltered
        active_tasks (list): all active tasks?
    """
    def __init__(self):
        """
        """
        self.installed: bool = True if subprocess.run(['task'], stdout=subprocess.PIPE, text=True) else False
        self.command = "task"
        self.pending_tasks = self.load_tasks('pending') if self.installed else False
        self.active_tasks = self.load_tasks('active') if self.installed else False

    def load_tasks(self, filter = None) -> Any:
        """:return: Json"""
        if filter is None:
            result = subprocess.run([self.command, 'export'], stdout=subprocess.PIPE, text=True)
        else:
            result = subprocess.run([self.command, f"status:{filter}", 'export'], stdout=subprocess.PIPE, text=True)
        try:
            tasks = json.loads(result.stdout)
            filter = None
            return tasks
        except Exception:
            return {}

    def active_tasks_list(self) -> List:
        _active_tasks = []
        for task in self.active_tasks:
            _active_tasks.append(f"{task["id"]} {task["description"]}")
        return _active_tasks
    
    def pending_tasks_list(self):
        pending_tasks = []
        for task in self.pending_tasks:
            pending_tasks.append(f"{task["id"]} {task["description"]}")
        return pending_tasks

""" Begin Main Program Flow
"""
def draw_ui(stdscr):
    curses.start_color()
    curses.init_pair(1, curses.COLOR_RED, curses.COLOR_BLACK)
    curses.init_pair(2, curses.COLOR_GREEN, curses.COLOR_BLACK)
    curses.init_pair(3, curses.COLOR_BLUE, curses.COLOR_BLACK)
    stdscr.clear()
    UI = UserInterface(stdscr)
    UI.render()

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="Dashboard Interface")
    args = parser.parse_args()
    curses.wrapper(lambda stdscr: draw_ui(stdscr))
